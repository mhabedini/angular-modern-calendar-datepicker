import * as momentJalali from 'jalali-moment';
import * as moment from 'moment';
import { extendMoment } from 'moment-range';
import { getWeekFirstAndLastDays, processDateRange } from "../helper/date-helper";
export class JalaliDateService {
    constructor() {
        this.translate = {
            goToToday: 'برو به امروز',
            nextMonth: 'ماه بعد',
            previousMonth: 'ماه قبل',
        };
        this.config = {
            rtl: true,
            WeekendDays: [6]
        };
        momentJalali.locale('fa', { useGregorianParser: true });
    }
    months() {
        return [
            "فروردین",
            "اردیبهشت",
            "خرداد",
            "تیر",
            "مرداد",
            "شهریور",
            "مهر",
            "آبان",
            "آذر",
            "دی",
            "بهمن",
            "اسفند",
        ];
    }
    monthsShort() {
        return [
            "فروردین",
            "اردیبهشت",
            "خرداد",
            "تیر",
            "مرداد",
            "شهریور",
            "مهر",
            "آبان",
            "آذر",
            "دی",
            "بهمن",
            "اسفند",
        ];
    }
    weekdays() {
        return [
            "شنبه",
            "یکشنبه",
            "دوشنبه",
            "سه شنبه",
            "چهارشنبه",
            "پنجشنبه",
            "جمعه",
        ];
    }
    weekdaysShort() {
        return [
            "ش",
            "ی",
            "د",
            "س",
            "چ",
            "پ",
            "ج"
        ];
    }
    daysInMonth(date) {
        const jalaliDate = momentJalali(date);
        const jDaysInMonth = jalaliDate.jDaysInMonth();
        const jMonth = jalaliDate.jMonth();
        const jYear = jalaliDate.jYear();
        const startDate = moment(momentJalali(`${jYear}/${jMonth + 1}/01`, 'jYYYY/jMM/jDD').doAsGregorian().format('YYYY/MM/DD'));
        const endDate = moment(momentJalali(`${jYear}/${jMonth + 1}/${jDaysInMonth}`, 'jYYYY/jMM/jDD').doAsGregorian().format('YYYY/MM/DD'));
        const year = moment(startDate).year();
        const [weeks, startDateDayBefore, endDateDayAfter] = processDateRange(startDate, endDate);
        const momentRange = extendMoment(moment);
        const calendar = [];
        const now = moment();
        weeks.forEach((week) => {
            let [firstWeekDay, lastWeekDay] = getWeekFirstAndLastDays(weeks, week, year);
            const weekRange = momentRange.range(firstWeekDay, lastWeekDay);
            const finalWeeks = [];
            Array.from(weekRange.by('day')).forEach((day, index) => {
                const jDate = momentJalali(day);
                finalWeeks.push({
                    gDate: day,
                    date: jDate,
                    weekIndex: index,
                    day: jDate.date(),
                    isToday: day.isSame(now, "day"),
                    isForCurrentMonth: day.isBetween(startDateDayBefore, endDateDayAfter)
                });
            });
            calendar.push(finalWeeks);
        });
        return calendar;
    }
    loadDaysInMonthWithYearAndMonth(jYear, jMonth) {
        const date = moment(momentJalali(`${jYear}/${this.months().indexOf(jMonth) + 1}/01`, 'jYYYY/jMM/jDD').doAsGregorian().format('YYYY/MM/DD'));
        return this.daysInMonth(date.format('YYYY/MM/DD'));
    }
    getCurrentMonth(date) {
        return date.format('MMMM');
    }
    getCurrentYear(date) {
        return date.format('YYYY');
    }
}
//# sourceMappingURL=data:application/json;base64,