import * as moment from 'moment';
import * as momentHijri from 'moment-hijri';
import { extendMoment } from 'moment-range';
import { getWeekFirstAndLastDays, processDateRange } from "../helper/date-helper";
export class HijriDateService {
    constructor() {
        this.translate = {
            goToToday: 'برو به امروز',
            nextMonth: 'ماه بعد',
            previousMonth: 'ماه قبل',
        };
        this.config = {
            rtl: true,
            WeekendDays: [6]
        };
        momentHijri.locale('ar-SA', { useGregorianParser: true });
    }
    months() {
        return [
            "محرم",
            "صفر",
            "ربیع الاول",
            "ربیع الثانی",
            "جمادی الاول",
            "جمادی الثانی",
            "رجب",
            "شعبان",
            "رمضان",
            "شوال",
            "ذیقعده",
            "ذیحجه",
        ];
    }
    monthsShort() {
        return [
            "محرم",
            "صفر",
            "ربیع الاول",
            "ربیع الثانی",
            "جمادی الاول",
            "جمادی الثانی",
            "رجب",
            "شعبان",
            "رمضان",
            "شوال",
            "ذیقعده",
            "ذیحجه",
        ];
    }
    weekdays() {
        return [
            "السبت",
            "الأحد",
            "الأثنين",
            "الثلاثاء",
            "الأربعاء",
            "الخميس",
            "الجمعه",
        ];
    }
    weekdaysShort() {
        return [
            "السبت",
            "الأحد",
            "الأثنين",
            "الثلاثاء",
            "الأربعاء",
            "الخميس",
            "الجمعه",
        ];
    }
    daysInMonth(date) {
        const hijriDate = momentHijri(date);
        const iDaysInMonth = hijriDate.iDaysInMonth();
        const iMonth = hijriDate.iMonth();
        const iYear = hijriDate.iYear();
        const startDate = moment(momentHijri(`${iYear}/${iMonth + 1}/01`, 'iYYYY/iMM/iDD').format('YYYY/MM/DD'));
        const endDate = moment(momentHijri(`${iYear}/${iMonth + 1}/${iDaysInMonth}`, 'iYYYY/iMM/iDD').format('YYYY/MM/DD'));
        const year = moment(startDate).year();
        console.log(startDate);
        console.log(endDate);
        const [weeks, startDateDayBefore, endDateDayAfter] = processDateRange(startDate, endDate);
        const momentRange = extendMoment(moment);
        const calendar = [];
        const now = moment();
        weeks.forEach((week) => {
            let [firstWeekDay, lastWeekDay] = getWeekFirstAndLastDays(weeks, week, year);
            const weekRange = momentRange.range(firstWeekDay, lastWeekDay);
            const finalWeeks = [];
            Array.from(weekRange.by('day')).forEach((day, index) => {
                const iDate = momentHijri(day.format('YYYY/MM/DD'), 'YYYY/MM/DD');
                console.log(iDate.format('YYYY/MM/DD'));
                finalWeeks.push({
                    gDate: day,
                    date: iDate,
                    weekIndex: index,
                    day: iDate.iDate(),
                    isToday: day.isSame(now, "day"),
                    isForCurrentMonth: day.isBetween(startDateDayBefore, endDateDayAfter)
                });
            });
            calendar.push(finalWeeks);
        });
        return calendar;
    }
    getCurrentMonth(date) {
        return this.months()[date.iMonth()];
    }
    getCurrentYear(date) {
        return date.format('iYYYY');
    }
    loadDaysInMonthWithYearAndMonth(iYear, iMonth) {
        const date = moment(momentHijri(`${iYear}/${this.months().indexOf(iMonth) + 1}/01`, 'iYYYY/iMM/iDD').format('YYYY/MM/DD'));
        return this.daysInMonth(date.format('YYYY/MM/DD'));
    }
}
//# sourceMappingURL=data:application/json;base64,