import * as moment from "moment/moment";
import { extendMoment } from "moment-range";
export function getWeekFirstAndLastDays(weeks, week, year) {
    let firstWeekDay;
    let lastWeekDay;
    if (weeks.includes(53) || weeks.includes(52)) {
        let highestWeek = 52;
        if (weeks.includes(53)) {
            highestWeek = 53;
        }
        if (week === highestWeek) {
            firstWeekDay = moment([year, 11]).week(week).startOf('week');
            lastWeekDay = moment([year, 11]).week(week).endOf('week');
        }
        else if (week === 1) {
            firstWeekDay = moment([year + 1, 0]).week(week).startOf('week');
            lastWeekDay = moment([year + 1, 0]).week(week).endOf('week');
        }
        else if (week < highestWeek && week > 5) {
            firstWeekDay = moment([year]).week(week).startOf('week');
            lastWeekDay = moment([year]).week(week).endOf('week');
        }
        else {
            firstWeekDay = moment([year + 1]).week(week).startOf('week');
            lastWeekDay = moment([year + 1]).week(week).endOf('week');
        }
    }
    else {
        firstWeekDay = moment([year]).week(week).startOf('week');
        lastWeekDay = moment([year]).week(week).endOf('week');
    }
    return [firstWeekDay, lastWeekDay];
}
export function processDateRange(startDate, endDate) {
    const momentRange = extendMoment(moment);
    const monthRange = momentRange.range(startDate, endDate);
    const weeks = [];
    const days = Array.from(monthRange.by('day'));
    days.forEach((it) => {
        if (!weeks.includes(it.week())) {
            weeks.push(it.week());
        }
    });
    const startDateDayBefore = startDate.subtract(1, 'days').startOf('day');
    const endDateDayAfter = endDate.endOf('day');
    return [weeks, startDateDayBefore, endDateDayAfter];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLXBlcnNpYW4tZGF0ZXBpY2tlci9zcmMvbGliL2hlbHBlci9kYXRlLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBRTFDLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxLQUFZLEVBQUUsSUFBWSxFQUFFLElBQVk7SUFDNUUsSUFBSSxZQUFZLENBQUE7SUFDaEIsSUFBSSxXQUFXLENBQUE7SUFFZixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMxQyxJQUFJLFdBQVcsR0FBWSxFQUFFLENBQUE7UUFDN0IsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3BCLFdBQVcsR0FBRyxFQUFFLENBQUE7U0FDbkI7UUFDRCxJQUFJLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDdEIsWUFBWSxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0QsV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0Q7YUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDbkIsWUFBWSxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hFLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRTthQUFNLElBQUksSUFBSSxHQUFHLFdBQVcsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZDLFlBQVksR0FBRyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekQsV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6RDthQUFNO1lBQ0gsWUFBWSxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0QsV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0Q7S0FDSjtTQUFNO1FBQ0gsWUFBWSxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RCxXQUFXLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3pEO0lBRUQsT0FBTyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQTtBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLFNBQWlCLEVBQUUsT0FBZTtJQUMvRCxNQUFNLFdBQVcsR0FBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDN0MsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFeEQsTUFBTSxLQUFLLEdBQVUsRUFBRSxDQUFDO0lBQ3hCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRTlDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFPLEVBQUUsRUFBRTtRQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtZQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLGtCQUFrQixHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN2RSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRTVDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxDQUFDLENBQUE7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9tZW50fSBmcm9tIFwibW9tZW50XCI7XHJcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tIFwibW9tZW50L21vbWVudFwiO1xyXG5pbXBvcnQge2V4dGVuZE1vbWVudH0gZnJvbSBcIm1vbWVudC1yYW5nZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtGaXJzdEFuZExhc3REYXlzKHdlZWtzOiBhbnlbXSwgd2VlazogbnVtYmVyLCB5ZWFyOiBudW1iZXIpOiBNb21lbnRbXSB7XHJcbiAgICBsZXQgZmlyc3RXZWVrRGF5XHJcbiAgICBsZXQgbGFzdFdlZWtEYXlcclxuXHJcbiAgICBpZiAod2Vla3MuaW5jbHVkZXMoNTMpIHx8IHdlZWtzLmluY2x1ZGVzKDUyKSkge1xyXG4gICAgICAgIGxldCBoaWdoZXN0V2VlazogNTIgfCA1MyA9IDUyXHJcbiAgICAgICAgaWYgKHdlZWtzLmluY2x1ZGVzKDUzKSkge1xyXG4gICAgICAgICAgICBoaWdoZXN0V2VlayA9IDUzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh3ZWVrID09PSBoaWdoZXN0V2Vlaykge1xyXG4gICAgICAgICAgICBmaXJzdFdlZWtEYXkgPSBtb21lbnQoW3llYXIsIDExXSkud2Vlayh3ZWVrKS5zdGFydE9mKCd3ZWVrJyk7XHJcbiAgICAgICAgICAgIGxhc3RXZWVrRGF5ID0gbW9tZW50KFt5ZWFyLCAxMV0pLndlZWsod2VlaykuZW5kT2YoJ3dlZWsnKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPT09IDEpIHtcclxuICAgICAgICAgICAgZmlyc3RXZWVrRGF5ID0gbW9tZW50KFt5ZWFyICsgMSwgMF0pLndlZWsod2Vlaykuc3RhcnRPZignd2VlaycpO1xyXG4gICAgICAgICAgICBsYXN0V2Vla0RheSA9IG1vbWVudChbeWVhciArIDEsIDBdKS53ZWVrKHdlZWspLmVuZE9mKCd3ZWVrJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrIDwgaGlnaGVzdFdlZWsgJiYgd2VlayA+IDUpIHtcclxuICAgICAgICAgICAgZmlyc3RXZWVrRGF5ID0gbW9tZW50KFt5ZWFyXSkud2Vlayh3ZWVrKS5zdGFydE9mKCd3ZWVrJyk7XHJcbiAgICAgICAgICAgIGxhc3RXZWVrRGF5ID0gbW9tZW50KFt5ZWFyXSkud2Vlayh3ZWVrKS5lbmRPZignd2VlaycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZpcnN0V2Vla0RheSA9IG1vbWVudChbeWVhciArIDFdKS53ZWVrKHdlZWspLnN0YXJ0T2YoJ3dlZWsnKTtcclxuICAgICAgICAgICAgbGFzdFdlZWtEYXkgPSBtb21lbnQoW3llYXIgKyAxXSkud2Vlayh3ZWVrKS5lbmRPZignd2VlaycpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmlyc3RXZWVrRGF5ID0gbW9tZW50KFt5ZWFyXSkud2Vlayh3ZWVrKS5zdGFydE9mKCd3ZWVrJyk7XHJcbiAgICAgICAgbGFzdFdlZWtEYXkgPSBtb21lbnQoW3llYXJdKS53ZWVrKHdlZWspLmVuZE9mKCd3ZWVrJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtmaXJzdFdlZWtEYXksIGxhc3RXZWVrRGF5XVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0RhdGVSYW5nZShzdGFydERhdGU6IE1vbWVudCwgZW5kRGF0ZTogTW9tZW50KTogYW55W10ge1xyXG4gICAgY29uc3QgbW9tZW50UmFuZ2U6IGFueSA9IGV4dGVuZE1vbWVudChtb21lbnQpXHJcbiAgICBjb25zdCBtb250aFJhbmdlID0gbW9tZW50UmFuZ2UucmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlKVxyXG5cclxuICAgIGNvbnN0IHdlZWtzOiBhbnlbXSA9IFtdO1xyXG4gICAgY29uc3QgZGF5cyA9IEFycmF5LmZyb20obW9udGhSYW5nZS5ieSgnZGF5JykpO1xyXG5cclxuICAgIGRheXMuZm9yRWFjaCgoaXQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmICghd2Vla3MuaW5jbHVkZXMoaXQud2VlaygpKSkge1xyXG4gICAgICAgICAgICB3ZWVrcy5wdXNoKGl0LndlZWsoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBjb25zdCBzdGFydERhdGVEYXlCZWZvcmUgPSBzdGFydERhdGUuc3VidHJhY3QoMSwgJ2RheXMnKS5zdGFydE9mKCdkYXknKVxyXG4gICAgY29uc3QgZW5kRGF0ZURheUFmdGVyID0gZW5kRGF0ZS5lbmRPZignZGF5JylcclxuXHJcbiAgICByZXR1cm4gW3dlZWtzLCBzdGFydERhdGVEYXlCZWZvcmUsIGVuZERhdGVEYXlBZnRlcl1cclxufVxyXG4iXX0=